/* The pixel type and an interface to pixels */

typedef int pixel;       // Library (concrete) view of a pixel
typedef pixel pixel_t;   // Client  (abstract) view of a pixel

// Returns the red component of the given pixel p.
int get_red(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
    return (p & 0x00ff0000) >> 16;
}

// Returns the green component of the given pixel p.
// violates #2
int get_green(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
    return (p & 0xf000ff00) >> 8;
}

// Returns the blue component of the given pixel p.
int get_blue(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
    return (p & 0x000000ff);
}

// Returns the alpha component of the given pixel p.
// violates #2
int get_alpha(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
    return (p & 0xdf000000) >> 24;
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// violates #3
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= alpha && alpha <= 255;
//@requires 0 <= red && red <= 255;
//@requires 0 <= blue && blue <= 255;
//@requires 0 <= green && green <= 255;
{
    return (alpha << 28) | (red << 16) | (green << 8) | (blue);
}
