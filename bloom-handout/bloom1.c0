#use <string>
#use <util>

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef struct bloom_filter* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;


/*** Implementation of bloom filters ***/

typedef struct bloom_filter bloom;
struct bloom_filter{
  bool[] data;
  int capacity;               // capacity == \length(data)
};

bool is_array_expected_length(bool[] data, int capacity) {
  //@assert \length(data) == capacity;
  return true;
}

int hash_mul31(string x)
{
    int len = string_length(x);
    if (len == 0) return 0;
    char[] char_arr = string_to_chararray(x);
    int result = 31*char_ord(char_arr[0]) + char_ord(char_arr[1]);
    for (int i = 2; i < len; i++)
    {
        result = result*31 + char_ord(char_arr[i]);
    }
    return result;
}

//Checks whether B is a valid Bloom Filter
bool is_bloom(bloom* B) {
  return B != NULL &&
         B->capacity > 0 &&
         is_array_expected_length(B->data, B->capacity);
}

int index_of_elem(bloom* B, string x)
//@requires is_bloom(B);
//@ensures 0 <= \result && \result < B->capacity;
{
  return abs(hash_mul31(x) % B->capacity);
}

//Initializes empty Bloom filter
bloom* bloom_new(int capacity)
//@requires capacity > 0;
//@ensures is_bloom(\result);
{
    bloom* B = alloc(bloom);
    B->capacity = capacity;
    B->data = alloc_array(bool, capacity);
    return B;
}

//Checks whether x is in B using the hash value of x
bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
{
    return B->data[index_of_elem(B, x)];
}

//Adds x to B using its hash value
void bloom_add(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
    int index = index_of_elem(B, x);
    if (B->data[index]) return;
    else B->data[index] = true;
}

