#use <string>
#use <util>
/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef struct bloom_filter* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;


/*** Implementation of bloom filters ***/

typedef struct bloom_filter bloom;
struct bloom_filter{
  int[] data;
  int limit;               // limit == \length(data)
};

int f(int x) { return 1664525 * x + 1013904223; }

//hash_mul31
int hash1(string x)
{
    int len = string_length(x);
    if (len == 0) return 0;
    char[] char_arr = string_to_chararray(x);
    int result = 31*char_ord(char_arr[0]) + char_ord(char_arr[1]);
    for (int i = 2; i < len; i++)
    {
        result = result*31 + char_ord(char_arr[i]);
    }
    return result;
}

//hash_lcg
int hash2(string x)
{
    int len = string_length(x);
    if (len == 0) return 0;
    char[] char_arr = string_to_chararray(x);
    int result =  f(char_ord(char_arr[0]));
    for (int i = 1; i < len; i++)
    {
        if (i == 1) result += char_ord(char_arr[i]);
        else result = f(result) + char_ord(char_arr[i]);
    }
    return result;
}

//sdbm hashing algorithm
int hash3(string x)
{
    int len = string_length(x);
    if (len == 0) return 0;
    char[] char_arr = string_to_chararray(x);
    int result = 5381;
    for (int i = 0; i < len; i++)
    {
        int c = char_ord(char_arr[i]);
        result = ((result << 5) + result) + c;
    }
    return result;
}

//Ceiling function for dividing by 32
int ceil(int x){
    if (x % 32 == 0) return x/32;
    else return x/32 + 1;
}

bool get_bit(int[] A, int i)
//@requires 0 <= i && i / 32 < \length(A);
{
    return ((A[i/32] >> i % 32) & 1) == 1;
}

void set_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
//@ensures get_bit(A,i);
{
    A[i/32] = (A[i/32] | (1 << i % 32));
}

//Checks whether arra is of size ceil(limit/32)
bool is_array_expected_length(int[] data, int limit) {
  //@assert \length(data) == ceil(limit);
  return true;
}

// Same invariant as before
bool is_bloom(bloom* B) {
  return B != NULL &&
         B->limit > 0 &&
         is_array_expected_length(B->data, B->limit);
}

//Get index depending on hash function hash
int index_of_elem(bloom* B, string x, int hash)
//@requires is_bloom(B);
//@ensures 0 <= \result && \result < 32*B->limit;
{
  if (hash == 1) return abs(hash1(x) % (32*ceil(B->limit)));
  else if (hash == 2) return abs(hash2(x) % (32*ceil(B->limit)));
  else return abs(hash3(x) % (32*ceil(B->limit)));
}

//Make new bloom filter with array length ceil(limit/32)
bloom* bloom_new(int limit)
//@requires limit > 0;
//@ensures is_bloom(\result);
//@ensures \result->limit == limit;
{
    bloom* B = alloc(bloom);
    B->limit = limit;
    B->data = alloc_array(int, ceil(limit));
    return B;
}

//Check whether the ith bit is set to true, for all hash functions
bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
{
    for (int i = 1; i <= 3; i++) {
        get_bit(B->data, index_of_elem(B, x, i));
        if (!get_bit(B->data, index_of_elem(B, x, i))) return false;
    }
    return true;
}

//Flip all of the ith bits to 1, for all hash functions
void bloom_add(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
    for (int i = 1; i <= 3; i++) {
        if (!get_bit(B->data, index_of_elem(B, x, i))) {
            set_bit(B->data, index_of_elem(B, x, i));
        }
    }
}
